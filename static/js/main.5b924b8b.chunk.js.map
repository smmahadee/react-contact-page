{"version":3,"sources":["globals.js","Store/index.js","Component/ShowContact.js","Component/AddContact.js","Component/ContactLists.js","Component/Navbar.js","App.js","index.js"],"names":["db","Localbase","sendContactData","data","a","collection","add","fetchContactData","get","deleteContact","delete","customizedData","sort","b","firstName","toUpperCase","imgSrc","forEach","_","i","push","reduce","acc","el","arr","currentChar","substr","isLetter","length","formSlice","createSlice","name","initialState","isShowModal","reducers","openForm","state","closeForm","contactSlice","saveContact","payload","copyState","current","slice","newData","replaceContact","deleteAllContact","store","configureStore","reducer","formAction","actions","contactAction","ShowContact","filterValue","contacts","useSelector","filter","toLowerCase","lastName","payloadVal","trim","indexOf","map","phone","className","src","alt","AddContact","showModal","dispatch","useDispatch","useForm","register","handleSubmit","errors","formState","reset","onClick","icon","faTimes","size","onSubmit","htmlFor","required","type","id","placeholder","pattern","value","message","email","ContactLists","useState","setFilterValue","onChange","e","target","faSearch","Navbar","initial","App","useEffect","response","catch","err","console","log","style","backgroundColor","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5b924b8b.chunk.js","sourcesContent":["import Localbase from 'localbase';\r\n\r\n// indexedDB initialized\r\nexport let db = new Localbase('db');\r\n\r\nexport const sendContactData = async data => {\r\n  await db.collection('users').add(data);\r\n};\r\n\r\nexport const fetchContactData = async () => {\r\n  const data = await db.collection('users').get();\r\n  return data;\r\n};\r\n\r\nexport const deleteContact = async () => {\r\n  db.collection('users').delete();\r\n}\r\n\r\n// this function customize contact data\r\nexport const customizedData = data => {\r\n  data.sort((a, b) => {\r\n    if (a.firstName.toUpperCase() < b.firstName.toUpperCase()) {\r\n      return -1;\r\n    }\r\n    if (a.firstName.toUpperCase() > b.firstName.toUpperCase()) {\r\n      return 1;\r\n    }\r\n    return null;\r\n  });\r\n\r\n  // get random image\r\n  const imgSrc = [];\r\n  data.forEach((_, i) => {\r\n    imgSrc.push(`https://randomuser.me/api/portraits/med/men/${i + 1}.jpg`);\r\n  });\r\n\r\n  const customizedData = data.reduce(\r\n    (acc, el, i, arr) => {\r\n      let currentChar = el.firstName.toUpperCase().substr(0, 1);\r\n      if (currentChar < 'A') currentChar = '#';\r\n      if (currentChar !== acc[1]) {\r\n        acc[0].push({ firstName: currentChar, isLetter: true });\r\n        acc[1] = currentChar;\r\n      }\r\n      if (el.firstName.length > 2) {\r\n\r\n   \r\n      \r\n      \r\n        acc[0].push({ ...el, isLetter: false, imgSrc: imgSrc[i] });\r\n      }\r\n      return acc;\r\n    },\r\n    [[], null]\r\n  )[0];\r\n\r\n  return customizedData;\r\n};\r\n","import { configureStore, createSlice, current } from '@reduxjs/toolkit';\r\nimport { sendContactData, deleteContact } from '../globals';\r\nimport { customizedData } from '../globals';\r\n\r\n// Add contact form related state\r\nconst formSlice = createSlice({\r\n  name: 'form',\r\n  initialState: { isShowModal: false },\r\n  reducers: {\r\n    openForm(state) {\r\n      state.isShowModal = true;\r\n    },\r\n    closeForm(state) {\r\n      state.isShowModal = false;\r\n    },\r\n  },\r\n});\r\n\r\n// contacts related state\r\nlet initialState = [];\r\n\r\nconst contactSlice = createSlice({\r\n  name: 'contact',\r\n  initialState,\r\n  reducers: {\r\n    saveContact(state, { payload }) {\r\n      const copyState = current(state).slice();\r\n      const newData = customizedData([...copyState, payload]);\r\n      sendContactData(payload);\r\n      return newData;\r\n    },\r\n    replaceContact(state, { payload }) {\r\n      const data = customizedData(payload);\r\n      data.forEach(data => state.push(data));\r\n    },\r\n    deleteAllContact() {\r\n      deleteContact();\r\n      return [];\r\n    },\r\n  },\r\n});\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    formSlice: formSlice.reducer,\r\n    contactSlice: contactSlice.reducer,\r\n  },\r\n});\r\n\r\nexport default store;\r\nexport const formAction = formSlice.actions;\r\nexport const contactAction = contactSlice.actions;\r\n","import { useSelector } from 'react-redux';\r\n\r\nexport default function ShowContact({ filterValue }) {\r\n  // Filtering contacts by searched keyword\r\n  const contacts = useSelector(state => {\r\n    if (filterValue !== null) {\r\n      return state.contactSlice.filter(el => {\r\n        const name = el.firstName.toLowerCase() + el.lastName?.toLowerCase();\r\n        const payloadVal = filterValue.trim().toLowerCase();\r\n        return name.indexOf(payloadVal) > -1;\r\n      });\r\n    } else {\r\n      return state.contactSlice;\r\n    }\r\n  });\r\n\r\n  // created all contacts element\r\n\r\n  let contactData;\r\n\r\n  if (contacts.length !== 0) {\r\n    contactData = contacts.map((el, i) => {\r\n      const { isLetter, firstName, lastName, phone, imgSrc } = el;\r\n\r\n      if (isLetter) {\r\n        return (\r\n          <div key={i} className='text-center text-xs'>\r\n            {firstName}\r\n          </div>\r\n        );\r\n      }\r\n\r\n      return (\r\n        <div\r\n          key={i}\r\n          className='mx-3 my-1 bg-white rounded px-2 flex space-x-3 items-center py-1'\r\n        >\r\n          <img className='rounded-full h-8' src={imgSrc} alt='' />\r\n          <div>\r\n            <h4 className='text-black'>{firstName + ' ' + lastName}</h4>\r\n            <p className='text-xs'>{phone}</p>\r\n          </div>\r\n        </div>\r\n      );\r\n    });\r\n  } else {\r\n    contactData = <div className='text-center mt-3'>No Contact Found</div>;\r\n  }\r\n\r\n  return contactData;\r\n}\r\n","import React from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { contactAction, formAction } from '../Store';\r\n\r\nexport default function AddContact() {\r\n  const showModal = useSelector(state => state.formSlice.isShowModal);\r\n  const dispatch = useDispatch();\r\n\r\n  // using react hook form library\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n    reset,\r\n  } = useForm();\r\n\r\n  // handling form submission\r\n  const onSubmit = data => {\r\n    dispatch(contactAction.saveContact(data));\r\n    dispatch(formAction.closeForm());\r\n    reset({});\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {showModal ? (\r\n        <>\r\n          <div className='justify-center items-center flex overflow-x-hidden overflow-y-auto fixed inset-0 z-50 outline-none focus:outline-none'>\r\n            <div className='relative w-96 my-6 mx-auto max-w-3xl'>\r\n              {/*content*/}\r\n              <div className='px-3 py-8  rounded-lg shadow-lg relative flex flex-col justify-center items-center bg-white '>\r\n                <button\r\n                  className='absolute top-3 right-5'\r\n                  onClick={() => dispatch(formAction.closeForm())}\r\n                >\r\n                  <FontAwesomeIcon icon={faTimes} size='1x' />\r\n                </button>\r\n                <h4 className='mb-5'>Contact Info</h4>\r\n\r\n                <form onSubmit={handleSubmit(onSubmit)}>\r\n                  <div className='inputParent'>\r\n                    <label htmlFor='name'>Name</label>\r\n                    <div className='flex flex-col'>\r\n                      <input\r\n                        {...register('firstName', { required: true })}\r\n                        className='input '\r\n                        type='text'\r\n                        id='name'\r\n                        placeholder='First Name'\r\n                      />\r\n                      {errors.firstName?.type === 'required' && (\r\n                        <div className='error'>First name is required</div>\r\n                      )}\r\n                      <input\r\n                        {...register('lastName', { required: true })}\r\n                        className='input mt-3'\r\n                        type='text'\r\n                        placeholder='Surename'\r\n                      />\r\n                      {errors.lastName?.type === 'required' && (\r\n                        <div className='error'>Sure name is required</div>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                  <div className='inputParent '>\r\n                    <label htmlFor='emal'>Email Address</label>\r\n                    <div>\r\n                      <input\r\n                        className='input text-md'\r\n                        placeholder='Your email'\r\n                        {...register('email', {\r\n                          required: 'Email is required',\r\n                          pattern: {\r\n                            value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\r\n                            message: 'Invalid email address',\r\n                          },\r\n                        })}\r\n                      />\r\n                      {errors.email && (\r\n                        <div className='error'>{errors.email.message}</div>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                  <div className='inputParent '>\r\n                    <label htmlFor='phone'>Contact Number</label>\r\n                    <div>\r\n                      <input\r\n                        className='input text-md'\r\n                        type='number'\r\n                        id='phone'\r\n                        placeholder='e.g +01825332455'\r\n                        {...register('phone', {\r\n                          required: 'Phone Number is required',\r\n                        })}\r\n                      />\r\n\r\n                      {errors.phone && (\r\n                        <div className='error'>{errors.phone.message}</div>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                  <button\r\n                    className='btn bg-primary-color float-right text-sm'\r\n                    type='submit'\r\n                  >\r\n                    Save Contact\r\n                  </button>\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className='opacity-25 fixed inset-0 z-40 bg-black'></div>\r\n        </>\r\n      ) : null}\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { formAction, contactAction } from '../Store/index';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\r\nimport ShowContact from './ShowContact';\r\nimport AddContact from './AddContact';\r\n\r\nexport default function ContactLists() {\r\n  const [filterValue, setFilterValue] = useState(null);\r\n  const dispatch = useDispatch();\r\n  const addContactHandler = () => dispatch(formAction.openForm());\r\n  const deleteContactHandler = () => dispatch(contactAction.deleteAllContact());\r\n\r\n  const changeHandler = e => {\r\n    const value = e.target.value;\r\n    setFilterValue(value);\r\n  };\r\n  return (\r\n    <main className='relative w-11/12 max-w-screen-md my-10 mx-auto rounded h-4/5 bg-gray-100 overflow-scroll'>\r\n      <nav className='sticky top-0 flex justify-between items-center space-x-3 bg-white p-2 mb-2'>\r\n        <div className='relative flex-grow self-auto'>\r\n          <input\r\n            className='w-full inputSearch '\r\n            type='text'\r\n            placeholder='Search Contact'\r\n            onChange={changeHandler}\r\n          />\r\n          <FontAwesomeIcon\r\n            className='absolute right-2 top-2 text-gray-300'\r\n            icon={faSearch}\r\n          />\r\n        </div>\r\n\r\n        <div className='flex space-x-3'>\r\n          <button className='btn bg-primary-color' onClick={addContactHandler}>\r\n            Add Contact\r\n          </button>\r\n          <button className='btn bg-gray-300' onClick = {deleteContactHandler}>Delete All</button>\r\n        </div>\r\n      </nav>\r\n\r\n      {/* Add contact form */}\r\n      <AddContact />\r\n\r\n      {/*Contact list Component*/}\r\n      <ShowContact filterValue={filterValue} />\r\n    </main>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Navbar() {\r\n    return (\r\n        <nav className='flex space-x-2 bg-white p-2.5'>\r\n            <div className=''>Home</div>\r\n            <div className='text-primary-color'>Contact List</div>\r\n        </nav>\r\n    )\r\n}\r\n","import { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { fetchContactData } from './globals';\nimport { useDispatch } from 'react-redux';\nimport { contactAction } from './Store';\n\nimport ContactLists from './Component/ContactLists';\nimport Navbar from './Component/Navbar';\n\nlet initial = false;\n\nexport default function App() {\n  const contacts = useSelector(state => state.contactSlice);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    (async () => {\n      if (!initial) {\n        const response = await fetchContactData();\n        dispatch(contactAction.replaceContact(response));\n        initial = true;\n      }\n    })().catch(err => console.log(err));\n  }, [contacts, dispatch]);\n\n  return (\n    <div\n      className='h-screen text-secondary-color'\n      style={{ backgroundColor: '#e5e5e5' }}\n    >\n      <Navbar />\n      <ContactLists />\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './Store/index';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}